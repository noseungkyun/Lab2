Setup

[hdfs@big-nn01 /]$ cd /training/analyst/data/Sample\ Examination/

-- 각 문제들을 HDFS에 올린다.

[hdfs@big-nn01 Sample Examination]$ hdfs dfs -mkdir /user/exam
[hdfs@big-nn01 Sample Examination]$ hdfs dfs -put Problem1 /user/exam/Problem1
[hdfs@big-nn01 Sample Examination]$ hdfs dfs -put Problem2 /user/exam/Problem2
[hdfs@big-nn01 Sample Examination]$ hdfs dfs -put Problem3 /user/exam/Problem3
[hdfs@big-nn01 Sample Examination]$ hdfs dfs -put Problem4 /user/exam/Problem4
[hdfs@big-nn01 Sample Examination]$ hdfs dfs -put Problem5 /user/exam/Problem5
[hdfs@big-nn01 Sample Examination]$ hdfs dfs -put Problem6 /user/exam/Problem6
[hdfs@big-nn01 Sample Examination]$ hdfs dfs -put Problem7 /user/exam/Problem7
[hdfs@big-nn01 Sample Examination]$ hdfs dfs -put Problem8 /user/exam/Problem8
[hdfs@big-nn01 Sample Examination]$ hdfs dfs -put Problem9 /user/exam/Problem9
[hdfs@big-nn01 Sample Examination]$ hdfs dfs -put Problem10 /user/exam/Problem10


------------------------------- Problem1
- Write a query to compare each active account’s balance to the average balance of all active accounts of the
same type.

- 'Active' 계좌중 각각 동일한 Type의 평균값과 각 계좌들의 잔액의 차를 보여주는 Query 작성.

- The account data exists in the metastore account table in the problem1 database. The amount column gives the
account balance. The type column gives the type of account and the status column gives the status of the
account.

1. Write the report query in the local file: /home/training/problem1/solution.sql
2. Executing the solution.sql script from the hive command-line tools should generate the report output
3. Only include accounts for which status is Active
4. Create a difference column holding the difference between the account balance (amount) and the average
balance for accounts of the same type to the right of all the other columns
5. The query should return the following columns from the account table: id, type, status, amount, as well as
the difference calculated

create database exam;
use exam;

create external table account (
id STRING, status STRING, amount INT, type STRING)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
LOCATION '/user/exam/Problem1'

- Hue(Hive)에서 실행
select a.id, 
       a.type, 
	   a.status, 
	   a.amount,
       (b.average - a.amount) as difference
  from account a
  join (select type, avg(amount) as average from account where status = "Active" group by type) b
    on a.type = b.type
 where status = "Active";

------------------------------- Problem2
- Create an employee table in the metastore that contains the employee records stored in HDFS
- parquet 파일로 employee 테이블 생성하는 쿼리 작성

- All of the employee records are stored in the /user/training/problem2/data/employee/ HDFS directory in Parquet
file format. The files contain the following columns and types:

1. The table you create should be named solution and stored in the problem2 database
2. The table must point to the existing data in HDFS

- Hue(Hive)에서 실행
CREATE EXTERNAL TABLE solution (
id int, fname string, lname string, 
address string, city string, state string, 
zip string, birthday string, hireday string )
stored as parquet
location “/user/exam/Problem2/data/employee/“

------------------------------- Problem3
- Generate a table that contains all customers who have negative account balances
마이너스 통장을 가지고 있는 사람들 목록 customer 테이블을 사용해서 테이블을 생성하란 의미인듯

- The customer records are stored in the customer table in the problem3 database. The account records are
stored in the account table in the problem3 database. The account records contain a field called amount that
may be negative. The custid field is a foreign key into the customer table.

customer 테이블에는 고객정보 // accont 테이블에는 마이너스 잔고를 가진 고객목록 (custid foreign key)

1. Create a metastore table named solution stored in the problem3 database that contains the customer
records that match the criteria
2. Each solution record should contain the Customer ID, first name, last name, and home phone of the
customer
3. Maintain the same column names and datatypes in the new table as the fields from the customer table

3번의 내용만 뽑으면 되는듯

create external table solution3
(id STRING, fname string, lname string, hphone string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
LOCATION '/user/exam/Problem3/customer'

- Hue(Hive)에서 실행
SELECT * FROM solution3;

------------------------------- Problem4 (PIG에서)
- LoudAcre Mobile has merged with another company located in California. Each company has a list of customers
in different formats. Combine the two customer lists into a single dataset using an identical schema.

LoudAcre Mobile 회사가 합병했는데 두 개의 회사가 다른 형태의 포맷으로 고객 정보를 관리하는가 봄

- The original customer data exists in the HDFS directory /user/training/problem4/data/employee1/. It contains
expanded, nine-digit zip codes. The new files are in the HDFS directory
/user/training/problem4/data/employee2/. It contains last names before first names, both using all capital letters

1. Combine these files into a single tab-delimited dataset and stored in the HDFS directory
/user/training/problem4/solution/
2. Each record should be in the following format:
3. Only include customers whose state is ‘CA’


employee1 = LOAD '/user/training/problem4/data/employee1' AS (customerID:Int, fname:chararray,
lname:chararray, address:chararray, city:chararray, state:chararray, zip: chararray);

emp1 = FOREACH employee1 GENERATE customerID, fname, lname, address, city, state, SUBSTRING(zip,0,5);

employee2 = LOAD '/user/training/problem4/data/employee2' USING PigStorage(',') AS (customerID:Int,
junk:Int, lname:chararray, fname:chararray, address:chararray, city:chararray, state:chararray, zip:
chararray);

emp2 = FOREACH employee2 GENERATE customerID, UCFIRST(LOWER(fname)), UCFIRST(LOWER(lname)), address, city, state, zip;

both = UNION emp1 , emp2;

STORE both INTO '/user/training/problem4/solution/

Hue -> File Browser에서 저장된 거 확인

------------------------------- Problem5
- The bank is making a Facebook group for the Palo Alto, CA branch. Generate a script that outputs the
customers and employees who live in Palo Alto, CA.

Palo Alto, CA 사는 고객 및 직원들

- The employee records are stored in the employee metastore table in the problem5 database, The customer
records are stored in the customer metastore table in the problem5 database.

1. Write the report query in the local file /home/training/problem5/solution.sql
2. Executing the solution.sql script from the hive command-line tools should generate the report output
3. The report should contain first name, last name, city, and state with a tab as the delimiter between fields
4. Only output records that have a city value of ‘Palo Alto’ and state value of ‘CA’
5. Duplicate records (if any) should be included

create external table customer5 
(id int, fname string, lname string, address string, city string, state string, zip string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' 
LOCATION "/user/exam/Problem5/customer";

create external table employee5 
(id int, fname string, lname string, address string, city string, state string, zip string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' 
LOCATION "/user/exam/Problem5/employee";

- Hue(Hive)에서 실행
select fname, 
       lname, 
	   city, 
	   state 
  from customer5 
 where city = "Palo Alto"
  AND state = "CA" 
UNION ALL 
select fname, 
       lname, 
	   city, 
	   state 
  from employee5 
 where city = "Palo Alto" 
   AND state = "CA";

------------------------------- Problem6
- There are privacy concerns about the employee data that is stored on the cluster. Your task is to remove any age
information from the employee data by creating a new table for the data analysts to query against.

privacy정보를 위해 나이 정보(월일생년에서 월일데이터만) 삭제한 후 새로운 테이블 생성

- All of the employee records are stored in the employee metastore table in the problem6 database.
1. Create a new table named solution stored in the problem6 database with the same file format as the
employee table
2. Maintain the same column names and datatypes in the new table
3. The birthday field in the solution table should be truncated to only contain month/day instead of the
current month/day/year data that is in the employee table

create external table employee6 
(id int, fname string, lname string, address string, city string, state string, zip string, birthday string) 
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' 
LOCATION "/user/exam/Problem6/employee";

create table solution6 as select id, fname, lname, address, city, state, zip, substr(birthday,1,5) from employee6;

- Hue(Hive)에서 실행
SELECT * FROM solution6;


------------------------------- Problem7
- Generate a report that contains all of the Seattle employee names in sorted order.
Seattle에사는 직원들을 이름순으로 정렬

- The employee records are stored in the employee table in the problem7 database.

1. Write the report query in the local file /home/training/problem7/solution.sql
2. Executing the solution.sql script from the hive command-line tools should generate the report output
3. The employee names should be printed out as the first name, a space, and the last name
4. The output should be sorted by first name and then by last name and should only contain employees
whose city is ‘Seattle’
5. Duplicate names should be included (if any) 

-> 중복되서 나와도 된다!

create external table employee7 
(id int, fname string, lname string, address string, city string, state string, zip string, birthday string) 
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
LOCATION "/user/exam/Problem7/employee";

- Hue(Hive)에서 실행
select concat(fname, " ", lname) as name from employee7 where city = "Seattle" order by name;

------------------------------- Problem8(Sqoop)
- Use Sqoop to export customer data from HDFS into a MySQL database table. Place the data in the solution
table in MySQL, which has been created and is currently empty.

Sqoop 을 이용하여 export HDFS -> MySql

The data files are in the HDFS directory /user/training/problem8/data/customer/. MySQL database information:

1. Installation: localhost
2. Database name: problem8 l Table name: solution
3. Username: cloudera
4. Password: cloudera

1. Export all of the customer data from HDFS into the MySQL solution table
2. The solution table already exists in the MySQL database but currently has no rows

현재 solution 테이블은 생성되어있지만 데이터는 없음

sqoop export
--connect jdbc:mysql://localhost/problem8
--username cloudera
--password cloudera
--table solution
--input-fields-terminated-by '\t'
--export-dir hdfs://localhost:8020/user/training/problem8/data/customer

------------------------------- Problem9
Your company is being acquired by another company. To prepare for this acquisition, update the customer
records to guarantee there will be no duplicate IDs with their existing customer IDs.

Data Description
The customer records are stored in the customer table in the problem9 database. The id column is a unique
identifier for that record.

Output Requirements
1. Create a new table named solution stored in the problem9 database
2. Maintain the same column names and datatypes as the customer table, except store the id as a string
3. The solution table should have all of the data from the customer table, with the addition of the letter ‘A’ to
the existing id values to make them unique

create external table customer9 
(id int, fname string, lname string, address string, city string, state string, zip string, birthday string) 
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
LOCATION "/user/exam/Problem9/customer";

create table solution9 as select concat("A", cast(id as string)) as id, fname, lname, address, city, state, zip, birthday from customer9;

- Hue(Hive)에서 실행
SELECT * FROM solution9;
------------------------------- Problem10
Your boss needs specialized reports using the billing data and is constantly asking for help to write SQL queries.
Create a database view in the metastore so that your boss has customer and billing data joined.

The customer data exists in the customer metasore table in the problem10 database. The billing data exists in
the billing metastore table in the problem10 database. The id column is a foreign key into which customer has
the charge.

Output Requirements
1. Create a new view named solution stored in the problem10 database
2. The new view should maintain the same column datatypes as the source tables
3. Do not return customer records that have no billing data, or billing records that have no matching
customer
4. The new view should contain the following columns
5. The billdate column should only contain the date field and no time information

create external table customer10 
(id int, fname string, lname string, address string, city string, state string, zip string, birthday string) 
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
LOCATION "/user/exam/Problem9/customer";

create external table billing10 
(id int, charge double, tstamp string) 
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' 
LOCATION "/user/exam/Problem10/billing";

create view solution as select a.id as id, 
                               a.fname as fname, 
							   a.lname as lname, 
							   a.city as city, 
							   a.state
							   as state, 
							   b.charge as charge, 
							   SUBSTR(b.tstamp,0,10) as billdate 
						  from customer a 
						  join billing b 
							on c.id = b.id;

------------------------------- Problem11











username 사용자를 wheel group에 추가한다. CentOS에서는 wheel group의 멤버가 sudo 권한을 가진다.


# 데이터베이스 로컬 서버 접속 후 root 계정으로 클라이언트 실행
$ mysql -u root -p

# somedb라는 이름의 데이터베이스 생성
mysql> CREATE DATABASE somedb;

# someuser/somepassword 사용자를 생성하고 somedb 데이터베이스 10.0.2.2 주소에서만 원격 접근 가능한 권한 부여
mysql> GRANT ALL ON somedb.* TO 'someuser'@'locahost' IDENTIFIED BY 'somepassword';
mysql> GRANT ALL ON somedb.* TO 'someuser'@'10.0.2.2' IDENTIFIED BY 'somepassword';

# 앞서 생성한 사용자를 삭제
mysql> DROP USER 'someuser'@'localhost';
mysql> DROP USER 'someuser'@'10.0.2.2';